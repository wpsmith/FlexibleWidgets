$breakpoints: (
        "phone": 400px,
        "phone-wide": 480px,
        "phablet": 560px,
        "tablet-small": 640px,
        "tablet": 768px,
        "tablet-wide": 1024px,
        "desktop": 1248px,
        "desktop-wide": 1440px
);
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  } @else {
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    @if $min == xxs {
      @media (max-width: 479px) {
        @content;
      }
    } @else if $min == xs {
      @media (min-width: 480px) and (max-width: 767px) {
        @content;
      }
    } @else if $min == sm {
      @media (min-width: 768px) {
        @content;
      }
    } @else if $min == md {
      @media (min-width: 992px) {
        @content;
      }
      //@media (min-width: 1024px) { @content; }
    } @else if $min == lg {
      //@media (min-width: 1280px) { @content; }
      @media (min-width: 1200px) {
        @content;
      }
    } @else if $min == xl {
      //@media (min-width: 1440px) { @content; }
      @media (min-width: 1400px) {
        @content;
      }
    }

      // Otherwise pass a warning to the compiler as to the appropriate options
    @else {
      @media (min-width: $size) {
        @content;
      }
      //@warn "The breakpoint mixin supports the following attributes: xs, sm, md, lg";
    }
  } @else if $type == number {
    // Allow for custom parameters for min and max size
    $query: "all" !default;
    @if $min != 0 and $max != 0 {
      $query: "(min-width: #{$min}) and (max-width: #{$max})";
    } // set both min and max
    @else if $min != 0 and $max == 0 {
      $query: "(min-width: #{$min})";
    } // set just min
    @else if $min == 0 and $max != 0 {
      $query: "(max-width: #{$max})";
    }
    // set just max
    @media #{$query} {
      @content;
    }
  }
}

@mixin flexbox($num: 1) {
  -webkit-box-flex: $num;
  box-flex: $num;
  -webkit-flex: $num;
  -moz-flex: $num;
  -ms-flex: $num;
  flex: $num;
}

///*
//
//	Media Query mixin
//
//	See https://github.com/sass-mq/sass-mq/ for original full version.
//
//	@example scss
//	 .element {
//	   @include mq($from: mobile) {
//		 color: red;
//	   }
//
//	   @include mq($to: tablet) {
//		 color: blue;
//	   }
//
//	   @include mq(mobile, tablet) {
//		 color: green;
//	   }
//
//	   @include mq($from: tablet, $and: '(orientation: landscape)') {
//		 color: teal;
//	   }
//
//	   @include mq(em(950px)) {
//		 color: hotpink;
//	   }
//
//	   @include mq(em(950px), $media-feature: height) {
//		 color: hotpink;
//	   }
//
//	   @include mq(tablet, $media-type: screen) {
//		 color: hotpink;
//	   }
//
//	   // Advanced use:
//	   $custom-breakpoints: (L: 900px, XL: 1200px);
//	   @include mq(L, $bp: $custom-breakpoints) {
//		 color: hotpink;
//	   }
//	 }
//
//*/

@mixin mediaQuery(
  $from: false,
  $to: false,
  $and: false,
  $media-feature: width,
  $media-type: all,
  $bp: $breakpoints
) {
  $min-width: 0;
  $max-width: 0;
  $media-query: '';

  // From: this breakpoint (inclusive)
  @if $from {
    @if type-of($from) == number {
      $min-width: $from;
    } @else {
      $min-width: map_get($bp, $from);
    }
  }

  // Until: that breakpoint (exclusive)
  @if $to {
    @if type-of($to) == number {
      $max-width: $to;
    } @else {
      $negative: if($em-media-queries, 0.01em, 1px);
      $max-width: map_get($bp, $to) - $negative;
    }
  }

  @if $media-feature {
    @if $min-width != 0 {
      $media-query: '#{$media-query} and (min-#{$media-feature}: #{$min-width})';
    }
    @if $max-width != 0 {
      $media-query: '#{$media-query} and (max-#{$media-feature}: #{$max-width})';
    }
  }

  @if $and {
    $media-query: '#{$media-query} and #{$and}';
  }

  // Remove unnecessary media query prefix 'all and '
  @if ($media-type == 'all' and $media-query != '') {
    $media-type: '';
    $media-query: str-slice(unquote($media-query), 6);
  }

  @media #{$media-type + $media-query} {
    @content;
  }
}
